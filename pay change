import random
import qrcode
import json

# Sample user database (just a dictionary for simplicity)
users = {
    "user1": {
        "password": "password123",
        "balance": 1000,
        "cashback_balance": 0,
        "transaction_history": [],
    }
}

# Cashback rate (5% cashback on every transaction)
CASHBACK_RATE = 0.05

# Function to register a user
def register(username, password):
    if username in users:
        print(f"Username {username} already exists.")
    else:
        users[username] = {
            "password": password,
            "balance": 0,
            "cashback_balance": 0,
            "transaction_history": [],
        }
        print(f"User {username} registered successfully!")

# Function to login a user
def login(username, password):
    if username in users and users[username]["password"] == password:
        print(f"Login successful for {username}!")
        return username
    else:
        print("Invalid username or password.")
        return None

# Function to make a transaction
def make_transaction(username, amount):
    user = users.get(username)
    if not user:
        print("User not found.")
        return

    if amount > user["balance"]:
        print("Insufficient balance.")
        return

    # Deduct the amount from the user's balance
    user["balance"] -= amount
    cashback = amount * CASHBACK_RATE

    # Add cashback to the user's cashback balance
    user["cashback_balance"] += cashback

    # Record transaction
    transaction = {
        "type": "purchase",
        "amount": amount,
        "cashback": cashback,
        "balance_after": user["balance"],
        "cashback_balance_after": user["cashback_balance"],
    }
    user["transaction_history"].append(transaction)

    print(f"Transaction of {amount} completed. You earned a cashback of {cashback:.2f}!")
    print(f"Remaining balance: {user['balance']}")
    print(f"Cashback balance: {user['cashback_balance']:.2f}")

# Function to add money to wallet (recharge)
def recharge_wallet(username, amount):
    user = users.get(username)
    if not user:
        print("User not found.")
        return

    user["balance"] += amount
    # Record transaction
    transaction = {
        "type": "recharge",
        "amount": amount,
        "balance_after": user["balance"],
    }
    user["transaction_history"].append(transaction)

    print(f"Wallet recharged by {amount}. New balance: {user['balance']}")

# Function to transfer money to another user
def transfer_money(username, recipient_username, amount):
    user = users.get(username)
    recipient = users.get(recipient_username)
    
    if not user or not recipient:
        print("Invalid user or recipient.")
        return

    if amount > user["balance"]:
        print("Insufficient balance.")
        return

    # Deduct from sender's balance and add to recipient's balance
    user["balance"] -= amount
    recipient["balance"] += amount

    # Record the transfer transaction for both users
    transaction = {
        "type": "transfer",
        "amount": amount,
        "to": recipient_username,
        "balance_after": user["balance"],
    }
    user["transaction_history"].append(transaction)

    recipient_transaction = {
        "type": "received",
        "amount": amount,
        "from": username,
        "balance_after": recipient["balance"],
    }
    recipient["transaction_history"].append(recipient_transaction)

    print(f"Transferred {amount} to {recipient_username}. New balance: {user['balance']}")

# Function to view the user's transaction history
def view_transaction_history(username):
    user = users.get(username)
    if user:
        print("Transaction History:")
        for transaction in user["transaction_history"]:
            print(json.dumps(transaction, indent=4))
    else:
        print("User not found.")

# Function to generate a QR code (simulating Paytm-like QR code payment)
def generate_qr_code(username):
    user = users.get(username)
    if not user:
        print("User not found.")
        return

    # Generate a unique QR code for this user (e.g., their username)
    qr_data = f"paytm:{username}"
    img = qrcode.make(qr_data)
    img.save(f"{username}_qr.png")
    print(f"QR code for {username} generated successfully. You can scan it to pay this user.")

# Function to view balance and cashback balance
def view_balance(username):
    user = users.get(username)
    if user:
        print(f"Balance: {user['balance']}")
        print(f"Cashback Balance: {user['cashback_balance']:.2f}")
    else:
        print("User not found.")

# Main function to simulate the app's workflow
def main():
    current_user = None
    while True:
        print("\n1. Register\n2. Login\n3. Make a Transaction\n4. Recharge Wallet\n5. Transfer Money\n6. View Balance\n7. View Transaction History\n8. Generate QR Code\n9. Exit")
        choice = input("Enter choice: ")

        if choice == '1':
            username = input("Enter username: ")
            password = input("Enter password: ")
            register(username, password)
        elif choice == '2':
            username = input("Enter username: ")
            password = input("Enter password: ")
            current_user = login(username, password)
        elif choice == '3':
            if current_user:
                amount = float(input("Enter transaction amount: "))
                make_transaction(current_user, amount)
            else:
                print("Please login first.")
        elif choice == '4':
            if current_user:
                amount = float(input("Enter recharge amount: "))
                recharge_wallet(current_user, amount)
            else:
                print("Please login first.")
        elif choice == '5':
            if current_user:
                recipient_username = input("Enter recipient username: ")
                amount = float(input("Enter transfer amount: "))
                transfer_money(current_user, recipient_username, amount)
            else:
                print("Please login first.")
        elif choice == '6':
            if current_user:
                view_balance(current_user)
            else:
                print("Please login first.")
        elif choice == '7':
            if current_user:
                view_transaction_history(current_user)
            else:
                print("Please login first.")
        elif choice == '8':
            if current_user:
                generate_qr_code(current_user)
            else:
                print("Please login first.")
        elif choice == '9':
            print("Exiting the app...")
            break
        else:
            print("Invalid choice.")

# Run the app
if __name__ == "__main__":
    main()
    
